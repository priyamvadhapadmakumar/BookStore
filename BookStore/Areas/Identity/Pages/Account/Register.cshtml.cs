using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Text.Encodings.Web;
using System.Threading.Tasks;
using BookStoreDataAccess.Repository.IRepository;
using BookStoreModels;
using BookStoreUtility;
using Microsoft.AspNetCore.Authentication;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Identity.UI.Services;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.RazorPages;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.AspNetCore.WebUtilities;
using Microsoft.Extensions.Logging;

namespace BookStore.Areas.Identity.Pages.Account
{ 
    [AllowAnonymous]
    public class RegisterModel : PageModel
    {
        private readonly SignInManager<IdentityUser> _signInManager;
        private readonly UserManager<IdentityUser> _userManager;
        private readonly ILogger<RegisterModel> _logger;
        //private readonly IEmailSender _emailSender;
        /*Add class that implements IEmailSender under StaticDetails so it doesn't throw an error.
         * And configure Startup to use this service.*/
        private readonly RoleManager<IdentityRole> _roleManager; //added to assign individual roles
        /*To configure RoleManager<IdentiyRole> so we can use it in our project,
         * Modify services.AddDefaultIdentity to services.AddIdentity<IdentityUser,IdentityRole>
         * Or it throws an error*/
        private readonly IUnitOfWork _unitOfWork;//added to use StaticDetails file

        public RegisterModel(
            UserManager<IdentityUser> userManager,
            SignInManager<IdentityUser> signInManager,
            ILogger<RegisterModel> logger,
            IEmailSender emailSender,
            RoleManager<IdentityRole> roleManager,
            IUnitOfWork unitOfWork)
        {
            _userManager = userManager;
            _signInManager = signInManager;
            _logger = logger;
            //_emailSender = emailSender;
            _roleManager = roleManager;
            _unitOfWork = unitOfWork;
        }

        [BindProperty] //input model wil be used inside register (cshtml)
        public InputModel Input { get; set; }

        public string ReturnUrl { get; set; }

        public IList<AuthenticationScheme> ExternalLogins { get; set; }

        public class InputModel
        {
            [Required]
            [EmailAddress]
            [Display(Name = "Email")]
            public string Email { get; set; }

            [Required]
            [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
            [DataType(DataType.Password)]
            [Display(Name = "Password")]
            public string Password { get; set; }

            [DataType(DataType.Password)]
            [Display(Name = "Confirm password")]
            [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
            public string ConfirmPassword { get; set; }

            //Additional properties that needs to be displayed on the register page.
            //These are the properties of ApplicationUser model
            [Required]
            public string Name { get; set; }
            public string Address { get; set; }
            public string City { get; set; }
            public string State { get; set; }
            public string PostalCode { get; set; }
            //Below Property not in our created model but autogenerated by .NET and available in db.
            public string PhoneNumber { get; set; } 
            public string Role { get; set; } //Individual roles are added in static details under Utility project
            public IEnumerable<SelectListItem> RolesList { get; set; }//to property than binds to company dropdown on cshtml file
        }

        public async Task OnGetAsync(string returnUrl = null)
        {
            ReturnUrl = returnUrl;
            Input = new InputModel() //Populating roles dropdown in front end.
            //Input model because corresponding page(view) has an input model
            {
                RolesList = _roleManager.Roles.
                Select(x=>x.Name).Select(i => new SelectListItem
                {
                    Text = i,
                    Value = i
                })

            };
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
        }

        public async Task<IActionResult> OnPostAsync(string returnUrl = null)
        {
            returnUrl ??= Url.Content("~/");
            ExternalLogins = (await _signInManager.GetExternalAuthenticationSchemesAsync()).ToList();
            if (ModelState.IsValid)
            {
                var user = new ApplicationUser //By default - new IdentityUser. Now, changed to applicationUser
                { UserName = Input.Email, //from Register.cshtml page -> has Input model
                    Email = Input.Email,
                    Address = Input.Address,
                    City = Input.City,
                    State = Input.State,
                    PostalCode = Input.PostalCode,
                    Name = Input.Name,
                    PhoneNumber=Input.PhoneNumber,
                    Role=Input.Role
                };
                var result = await _userManager.CreateAsync(user, Input.Password); //creates user 
                //for creating roles of user
                if (result.Succeeded)
                {
                    _logger.LogInformation("User created a new account with password.");
                    //creates customized Roles in db
                    if(!await _roleManager.RoleExistsAsync(StaticDetails.Role_Admin))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(StaticDetails.Role_Admin));
                    }
                    if (!await _roleManager.RoleExistsAsync(StaticDetails.Role_Customer))
                    {
                        await _roleManager.CreateAsync(new IdentityRole(StaticDetails.Role_Customer));
                    }

                    //directly from register--w/o log in as admin
                    if (user.Role == null)
                    {
                        await _userManager.AddToRoleAsync(user, StaticDetails.Role_Customer);
                    }
                    //register page- after log in as admin - when admin wants to add an user
                    else
                    {
                        await _userManager.AddToRoleAsync(user, user.Role); //populated from dropdown that admin assigns
                    }

                    //await _userManager.AddToRoleAsync(user, StaticDetails.Role_Admin);//for time being - sets 1st user as admin

                    /*Creates tokens for default user.Now we changed Startup config to create default tokens.So commented out
                    var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);
                    code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                    var callbackUrl = Url.Page(
                        "/Account/ConfirmEmail",
                        pageHandler: null,
                        values: new { area = "Identity", userId = user.Id, code = code, returnUrl = returnUrl },
                        protocol: Request.Scheme);

                    await _emailSender.SendEmailAsync(Input.Email, "Confirm your email",
                        $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");
                    */

                    if (_userManager.Options.SignIn.RequireConfirmedAccount)
                        //provided by default by ASP.NET Core UserAuthentication
                    {
                        return RedirectToPage("RegisterConfirmation", new { email = Input.Email, returnUrl = returnUrl });
                    }
                    else
                    {
                        if(user.Role == null) //user signs in from website
                        {
                            await _signInManager.SignInAsync(user, isPersistent: false);
                            return LocalRedirect(returnUrl);
                        }
                        else
                        {
                            //admin is registering a new user
                            //Don't want to log out admin and sign in new user admin created
                            //so redirect to userlist
                            return RedirectToAction("Index", "User", new { Area = "Admin" });
                            /*returns to admin area-index view and user controller
                             * This gives list of all users displayed to the admin*/
                        }
                        
                    }
                }
                foreach (var error in result.Errors)
                {
                    ModelState.AddModelError(string.Empty, error.Description);
                }
            }

            // If we got this far, something failed, redisplay form
            return Page();
        }
    }
}
